/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainComponent.h"


//==============================================================================
class AudioPlayerJuceApplication  : public JUCEApplication
{
public:
    //==============================================================================
    AudioPlayerJuceApplication() {}

    const String getApplicationName()       { return ProjectInfo::projectName; }
    const String getApplicationVersion()    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed()       { return true; }

    //==============================================================================
    void initialise (const String& /*commandLine*/)
    {
        mainWindow = new MainWindow();
    }

    void shutdown()
    {
        mainWindow = nullptr; // (deletes our window)
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& /*commandLine*/)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

    //==============================================================================
    /*
        This class implements the desktop window that contains an instance of
        our MainContentComponent class.
    */
    class MainWindow    : public DocumentWindow
    {
    public:

        // the command manager object used to dispatch command events
        ApplicationCommandManager commandManager;

        MainWindow()  : DocumentWindow ("Audio Player",
                                        Colours::lightgrey,
                                        DocumentWindow::allButtons)
        {
            MainContentComponent* main = new MainContentComponent(&commandManager);
            
            commandManager.registerAllCommandsForTarget (main);
            commandManager.registerAllCommandsForTarget (JUCEApplication::getInstance());

            // this lets the command manager use keypresses that arrive in our window to send
            // out commands
            addKeyListener (commandManager.getKeyMappings());

            setContentOwned (main, true);

            // this tells the DocumentWindow to automatically create and manage a MenuBarComponent
            // which uses our contentComp as its MenuBarModel
            setMenuBar (main);

            // tells our menu bar model that it should watch this command manager for
            // changes, and send change messages accordingly.
            main->setApplicationCommandManagerToWatch (&commandManager);

            centreWithSize (getWidth(), getHeight());
            setVisible (true);
            setResizable(true, true);
        }

        ~MainWindow()
        {	
            // because we've set the content comp to be used as our menu bar model, we
            // have to switch this off before deleting the content comp..
            setMenuBar (nullptr);

            // clearing the content component will delete the current one, and
            // that will in turn delete all its child components. You don't always
            // have to do this explicitly, because the base class's destructor will
            // also delete the content component, but in this case we need to
            // make sure our content comp has gone away before deleting our command
            // manager.
            clearContentComponent();
        }

        void closeButtonPressed()
        {
            // This is called when the user tries to close this window. Here, we'll just
            // ask the app to quit when this happens, but you can change this to do
            // whatever you need.
            JUCEApplication::getInstance()->systemRequestedQuit();
        }

        /* Note: Be careful if you override any DocumentWindow methods - the base
           class uses a lot of them, so by overriding you might break its functionality.
           It's best to do all your work in your content component instead, but if
           you really have to override any DocumentWindow methods, make sure your
           subclass also calls the superclass's method.
        */

    private:
        JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MainWindow)
    };

private:
    ScopedPointer<MainWindow> mainWindow;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (AudioPlayerJuceApplication)
